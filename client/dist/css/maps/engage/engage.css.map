{"version":3,"sources":["engage/engage.scss","engage/engage.css","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAIA;EACE,0CAAA;EACA,uBAAA;ACHF;ADKE;EACE,gBAAA;ACHJ;ADOI;EACE,+BAAA;ACLN;ADQI;EACE,SAAA;EACA,gBAAA;EACA,kBAAA;EACA,oBAAA;ACNN;ADQM;EACE,kBAAA;EACA,OAAA;EACA,WAAA;ACNR;ADQQ;EACE,8BAAA;ACNV;;ADaA;EACE,eAAA;ACVF;;ADcE;EACE,WAAA;EACA,0CAAA;EACA,gBAAA;EACA,uCAAA;ACXJ;ADaE;EACE,cAAA;EACA,gBAAA;EACA,qBAAA;ACXJ;ADcE;EACE,aAAA;ACZJ;ADeM;EACE,WAAA;EACA,kBAAA;ACbR;ADiBI;EACE,gBAAA;ACfN;;ADoBA;EACE,YAAA;ACjBF;;ADqBE;EACE,qBAAA;AClBJ;ADoBI;EACE,gBAAA;AClBN;;ACGI;EFqBF;IACE,uBAAA;ECpBF;AACF;ACHI;EF2BF;IACE,uBAAA;ECrBF;AACF","file":"../../../../src/scss/engage/engage.css","sourcesContent":["@import \"../variables\";\n@import \"../build_essentials\";\n@import \"bootstrap/scss/mixins/breakpoints\";\n\n.job-card {\n  border: solid 1px var(--brand-brandcolour);\n  width: calc(50% - 2rem);\n\n  .job-bullets {\n    min-height: 60px;\n  }\n\n  p {\n    strong {\n      color: var(--brand-brandcolour);\n    }\n\n    &.bullet {\n      margin: 0;\n      font-size: 0.9em;\n      position: relative;\n      padding-left: 1.5rem;\n\n      svg {\n        position: absolute;\n        left: 0;\n        top: 0.1rem;\n\n        path {\n          fill: var(--brand-brandcolour);\n        }\n      }\n    }\n  }\n}\n\n.job-listings {\n  flex-wrap: wrap;\n}\n\n.search-filters {\n  input, select {\n    width: 100%;\n    border: solid 1px var(--brand-brandcolour);\n    padding: 0.25rem;\n    background: var(--brand-bodybackground);\n  }\n  label, .jb-label {\n    display: block;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n  }\n\n  .jb-checkbox-wrapper {\n    display: flex;\n\n    input {\n      &.form-check-input {\n        width: auto;\n        margin-right: 1rem;\n      }\n    }\n\n    label {\n      font-weight: 400;\n    }\n  }\n}\n\n.h-100 {\n  height: 100%;\n}\n\n.pagination {\n  a {\n    text-decoration: none;\n\n    &.current {\n      font-weight: 700;\n    }\n  }\n}\n\n@include media-breakpoint-up('lg') {\n  .job-card {\n    width: calc(33% - 2rem);\n  }\n}\n\n@include media-breakpoint-up('xl') {\n  .job-card {\n    width: calc(25% - 2rem);\n  }\n}\n",".job-card {\n  border: solid 1px var(--brand-brandcolour);\n  width: calc(50% - 2rem);\n}\n.job-card .job-bullets {\n  min-height: 60px;\n}\n.job-card p strong {\n  color: var(--brand-brandcolour);\n}\n.job-card p.bullet {\n  margin: 0;\n  font-size: 0.9em;\n  position: relative;\n  padding-left: 1.5rem;\n}\n.job-card p.bullet svg {\n  position: absolute;\n  left: 0;\n  top: 0.1rem;\n}\n.job-card p.bullet svg path {\n  fill: var(--brand-brandcolour);\n}\n\n.job-listings {\n  flex-wrap: wrap;\n}\n\n.search-filters input, .search-filters select {\n  width: 100%;\n  border: solid 1px var(--brand-brandcolour);\n  padding: 0.25rem;\n  background: var(--brand-bodybackground);\n}\n.search-filters label, .search-filters .jb-label {\n  display: block;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n}\n.search-filters .jb-checkbox-wrapper {\n  display: flex;\n}\n.search-filters .jb-checkbox-wrapper input.form-check-input {\n  width: auto;\n  margin-right: 1rem;\n}\n.search-filters .jb-checkbox-wrapper label {\n  font-weight: 400;\n}\n\n.h-100 {\n  height: 100%;\n}\n\n.pagination a {\n  text-decoration: none;\n}\n.pagination a.current {\n  font-weight: 700;\n}\n\n@media (min-width: 992px) {\n  .job-card {\n    width: calc(33% - 2rem);\n  }\n}\n@media (min-width: 1200px) {\n  .job-card {\n    width: calc(25% - 2rem);\n  }\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}