{"version":3,"sources":["blog/main.scss","blog/main.css","_variables.scss","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAIA;EACE,kBAAA;EACA,iBAAA;EACA,2BAAA;EACA,sBAAA;ACHF;ADKE;EACE,aAAA;EACA,oCAAA;EACA,cEEI;EFDJ,kBAAA;EACA,SAAA;EACA,OAAA;EACA,WAAA;EACA,SAAA;EACA,0CAAA;EACA,aAAA;EACA,8BAAA;EACA,mBAAA;ACHJ;ADKI;EACE,qBAAA;EACA,cAAA;ACHN;ADOM;EACE,kBAAA;EACA,eAAA;EACA,oBAAA;EACA,iBAAA;ACLR;;ADYE;EACE,iBAAA;EACA,gBAAA;ACTJ;ADWI;EACE,qBAAA;EACA,cAAA;EACA,gBAAA;ACTN;;AEwBI;EHRF;IACE,WAAA;IACA,YAAA;ECZF;EDeA;IACE,qCAAA;IACA,wBAAA;IACA,uBAAA;IACA,oBAAA;ECbF;EDgBA;IACE,gBAAA;IACA,aAAA;ECdF;EDgBE;IACE,8BAAA;ECdJ;EDkBA;IACE,gBAAA;IACA,WAAA;IACA,iBAAA;EChBF;EDmBA;IACE,gBAAA;IACA,WAAA;IACA,iBAAA;ECjBF;AACF","file":"../../../../src/scss/blog/main.css","sourcesContent":["@import \"../variables\";\n@import \"../build_essentials\";\n@import \"bootstrap/scss/mixins/breakpoints\";\n\n.post-summary {\n  position: relative;\n  aspect-ratio: 3/2;\n  background-position: center;\n  background-size: cover;\n\n  h2 {\n    padding: 1rem;\n    background-color: rgba(0,0,0,0.7);\n    color: $white;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    margin: 0;\n    font-size: calc(var(--brand-h2size) * 0.7);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n\n    span {\n      &.readmore {\n        font-style: italic;\n        font-size: 1rem;\n        padding-left: 0.9rem;\n        text-align: right;\n      }\n    }\n  }\n}\n\np {\n  &.pagination {\n    font-size: 1.3rem;\n    font-weight: 700;\n\n    a {\n      text-decoration: none;\n      color: inherit;\n      font-weight: 400;\n    }\n  }\n}\n\n@include media-breakpoint-up('lg') {\n\n  .post-summary {\n    width: 100%;\n    height: 100%;\n  }\n\n  .blog-postlist {\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: auto;\n    grid-column-gap: 1.5rem;\n    grid-row-gap: 1.5rem;\n  }\n\n  .post-1 {\n    grid-column: 1/3;\n    grid-row: 1/3;\n\n    h2 {\n      font-size: var(--brand-h2size);\n    }\n  }\n\n  .post-2 {\n    grid-column: 3/5;\n    grid-row: 1;\n    aspect-ratio: 3/1;\n  }\n\n  .post-3 {\n    grid-column: 3/5;\n    grid-row: 2;\n    aspect-ratio: 3/1;\n  }\n\n}\n",".post-summary {\n  position: relative;\n  aspect-ratio: 3/2;\n  background-position: center;\n  background-size: cover;\n}\n.post-summary h2 {\n  padding: 1rem;\n  background-color: rgba(0, 0, 0, 0.7);\n  color: #ffffff;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  margin: 0;\n  font-size: calc(var(--brand-h2size) * 0.7);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.post-summary h2 a {\n  text-decoration: none;\n  color: inherit;\n}\n.post-summary h2 span.readmore {\n  font-style: italic;\n  font-size: 1rem;\n  padding-left: 0.9rem;\n  text-align: right;\n}\n\np.pagination {\n  font-size: 1.3rem;\n  font-weight: 700;\n}\np.pagination a {\n  text-decoration: none;\n  color: inherit;\n  font-weight: 400;\n}\n\n@media (min-width: 992px) {\n  .post-summary {\n    width: 100%;\n    height: 100%;\n  }\n  .blog-postlist {\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: auto;\n    grid-column-gap: 1.5rem;\n    grid-row-gap: 1.5rem;\n  }\n  .post-1 {\n    grid-column: 1/3;\n    grid-row: 1/3;\n  }\n  .post-1 h2 {\n    font-size: var(--brand-h2size);\n  }\n  .post-2 {\n    grid-column: 3/5;\n    grid-row: 1;\n    aspect-ratio: 3/1;\n  }\n  .post-3 {\n    grid-column: 3/5;\n    grid-row: 2;\n    aspect-ratio: 3/1;\n  }\n}","// The default spacers for bootstrap stop quite small so these are to allow larger padding using utility classes\n$spacers: (\n  0: 0,\n  1: .25rem,\n  2: .5rem,\n  3: 1rem,\n  4: 2rem,\n  5: 3rem,\n  6: 4rem,\n  7: 6rem,\n  8: 8rem,\n  9: 10rem\n);\n\n//Common Colours\n$white: #ffffff;\n$black: #000000;\n\n// Margin and padding for the elements (enabled on a per-element basis in the CMS)\n$element-padding: 2rem !default;\n$element-margin: 2rem !default;\n\n//Set up a few Bootstrap things\n$enable-dark-mode: false;\n$enable-important-utilities: false;\n$enable-gradients: false;\n$enable-negative-margins: false;\n$headings-font-family: var(--brand-titlefamilyname);\n$font-family-base: var(--brand-bodyfamilyname);\n$h1-font-size: var(--brand-h1size);\n$h2-font-size: var(--brand-h2size);\n$h3-font-size: var(--brand-h3size);\n$h4-font-size: var(--brand-h4size);\n$h5-font-size: var(--brand-h5size);\n$h6-font-size: var(--brand-h6size);\n$body-bg: $white;\n$btn-border-width: 1px;\n$btn-padding-y: 0.375rem;\n$btn-padding-x: 1.15rem;\n\n//Nav options\n$hamburger-types: (\n  spin\n);\n$hamburger-layer-color: var(--brand-burgercolour);\n$hamburger-active-layer-color: var(--brand-burgercolour);\n$hamburger-layer-width: 15px;\n$hamburger-layer-height: 2px;\n$hamburger-layer-spacing: 4px;\n$hamburger-padding-x: 8px;\n$hamburger-padding-y: 8px;\n\n$navigation-level1-size: 1.25rem;\n$navigation-level2-size: 1.05rem;\n\n\n//Element-specific options\n$pagination-button-size: 1rem;\n$testimonials-prevnext-size: 35px;\n\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}